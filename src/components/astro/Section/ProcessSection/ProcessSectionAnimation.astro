---
import SpinningWheel from "../spinningWheel.astro";
import ProcessSectionLeft from "./ProcessSectionLeft.astro";
import ProcessSectionRight from "./ProcessSectionRight.astro";
---

<div
	class="col-span-full col-start-1 grid auto-rows-min xl:col-span-2 xl:col-start-2 xl:grid-cols-2">
	<div id="processSectionContainer" class="col-span-full">
		<div
			id="processSection"
			class="flex max-h-[100dvh] min-h-[100dvh] flex-col overflow-hidden ~py-6/24">
			<!-- top section -->
			<div class="flex flex-col items-center gap-5 lg:flex-row lg:gap-[7vw]">
				<!-- title of card -->
				<div class="max-h-[3.6rem] overflow-hidden lg:w-[20vw] 2xl:w-[16vw] mr-auto">
					<h2
						class="processTitle text-base !leading-[1.8rem] will-change-transform md:text-lg">
						Requirement Collection
					</h2>
					<h2
						class="processTitle text-base !leading-[1.8rem] will-change-transform md:text-lg">
						Prototyping
					</h2>
					<h2
						class="processTitle text-base !leading-[1.8rem] will-change-transform md:text-lg">
						Optimization and Deployment
					</h2>
					<h2
						class="processTitle text-base !leading-[1.8rem] will-change-transform md:text-lg">
						Ad Campaign and Profile Building
					</h2>
				</div>

				<div class="hidden flex-1 flex-col gap-5 md:flex">
					<!-- progress bar -->
					<div
						class="relative col-span-2 col-start-1 row-start-1 h-[20px] w-full overflow-hidden rounded bg-card xl:col-span-1 xl:col-start-2 xl:h-[30px]">
						<div class="absolute flex size-full">
							<div
								id="processSectionProgressBar"
								class="size-full rounded bg-primary">
							</div>
							<div
								id="processSectionWheel"
								class="absolute left-0 flex aspect-square h-full items-center justify-center py-0.5 will-change-transform xl:p-0.5">
								<SpinningWheel />
							</div>
						</div>
					</div>

					<!-- progress steps -->
					<div
						class="col-start-2 hidden items-center justify-between uppercase tracking-tight text-flatgray xl:flex">
						<!-- label -->
						<div class="flex items-center justify-start gap-3">
							<span class="processStep processActive flex items-center gap-1"
								><span class="overflow-hidden">step</span><span>/01/</span
								></span
							>
							<span class="processStep flex items-center gap-1"
								><span class="w-0 overflow-hidden">step</span><span>/02/</span
								></span
							>
							<span class="processStep flex items-center gap-1"
								><span class="w-0 overflow-hidden">step</span><span>/03/</span
								></span
							>
							<span class="processStep flex items-center gap-1"
								><span class="w-0 overflow-hidden">step</span><span>/04/</span
								></span
							>
						</div>
						<!-- progress text -->
						<div class="flex items-center gap-1">
							<span class="uppercase">progress</span>
							<span id="processSectionProgressText" class="text-primary"
								>0%</span
							>
						</div>
					</div>
				</div>
			</div>

			<!-- main content section -->
			<div class="h-auto max-h-full flex-1 overflow-hidden ~pt-6/16">
				<article
					id="processScroll"
					class="flex h-auto max-h-full flex-col gap-6 overflow-hidden rounded-xl bg-card md:min-h-[40vh] md:flex-row xl:gap-[4vw]">
					<ProcessSectionLeft />
					<ProcessSectionRight />
				</article>
			</div>
		</div>
	</div>
</div>

<style>
	.processActive {
		@apply text-primary;
	}
</style>

<script>
	import gsap from "gsap";
	import { ScrollTrigger } from "gsap/ScrollTrigger";
	import textAnimationLeft from "./textAnimationLeft";
	import imageAnimationRight from "./imageAnimationRight";
	import progressStepsAnimation from "./progressStepsAnimation";
	import progressBarAnimation from "./progressBarAnimation";
	import titleAnimation from "./titleAnimation";
	import progressWheelAnimation from "./progressWheelAnimation";
	import priceSectionAnimationLogic from "@/components/astro/Section/PriceSection/priceSectionAnimationLogic";
	import Lenis from "lenis";

	gsap.registerPlugin(ScrollTrigger);
	gsap.config({
		force3D: true,
	});
	gsap.defaults({
		overwrite: true,
	});
	ScrollTrigger.config({ ignoreMobileResize: true });

	const processSection = document.getElementById(
		"processSection",
	) as HTMLElement | null;
	const processLeftChildren = gsap.utils.toArray(
		"#processLeft>*",
	) as HTMLElement[];
	const processRightChildren = gsap.utils.toArray(
		"#processRight>*",
	) as HTMLElement[];
	const processSectionProgressBar = document.getElementById(
		"processSectionProgressBar",
	) as HTMLElement | null;
	const processSteps = gsap.utils.toArray(".processStep") as HTMLElement[];
	const processStepsFirstSpan = gsap.utils.toArray(
		".processStep span:first-child",
	) as HTMLElement[];
	const processSectionProgressText = document.getElementById(
		"processSectionProgressText",
	) as HTMLElement | null;
	const processTitle = gsap.utils.toArray(".processTitle") as HTMLElement[];
	const processSectionWheel = document.getElementById("processSectionWheel");
	const processScroll = document.getElementById(
		"processScroll",
	) as HTMLElement | null;
	const processSectionContainer = document.getElementById(
		"processSectionContainer",
	);

	if (processSectionProgressBar)
		processSectionProgressBar.style.willChange = "transform";
	for (let i = 1; i < processLeftChildren.length; i++) {
		processLeftChildren[i].style.display = "none";
		processLeftChildren[i].style.opacity = "0";
	}
	for (let i = 1; i < processRightChildren.length; i++) {
		gsap.set(processRightChildren[i], {
			xPercent: 110,
		});
	}
	for (let i = 0; i < processStepsFirstSpan.length; i++) {
		processStepsFirstSpan[i].style.willChange = "width";
	}
	for (let i = 1; i < processTitle.length; i++) {
		processTitle[i].style.display = "none";
	}

	const scrollDistancePerCard = 600;

	const rotateWheel = gsap.to(processSectionWheel, {
		rotation: 360,
		transformOrigin: "center",
		duration: 7,
		repeat: -1,
		ease: "none",
		overwrite: false,
		onReverseComplete: function () {
			this.progress(1);
		},
	});

	const timeline = gsap.timeline({
		scrollTrigger: {
			trigger: processSection,
			start: "top top",
			pin: true,
			pinType: "transform",
			pinnedContainer: processSectionContainer,
			// pinReparent: true,
			pinSpacing: true,
			end: `+=${scrollDistancePerCard * processLeftChildren.length}`,
			scrub: true,
			// markers: true,
			invalidateOnRefresh: true,
			onUpdate: progressWheelAnimation.bind(null, rotateWheel),
		},
		defaults: { duration: 0, ease: "none", overwrite: true },
	});

	// the first card does not need any animation when scrolling up or down
	for (let i = 1; i < processLeftChildren.length; i++) {
		timeline.add(() => {
			// note the diff when scrolling down and up
			const indexToShow = timeline.scrollTrigger?.direction === -1 ? i - 1 : i;
			const indexToHide = timeline.scrollTrigger?.direction === -1 ? i : i - 1;

			textAnimationLeft(
				processLeftChildren[indexToShow],
				processLeftChildren[indexToHide],
				processLeftChildren.filter(
					(_, i) => i !== indexToShow && i !== indexToHide,
				),
			);
			imageAnimationRight(
				processRightChildren[indexToShow],
				processRightChildren[indexToHide],
				processRightChildren.filter(
					(_, i) => i !== indexToShow && i !== indexToHide,
				),
			);
			progressStepsAnimation(
				processSteps[indexToShow],
				processSteps[indexToHide],
				processSteps.filter((_, i) => i !== indexToShow && i !== indexToHide),
				processStepsFirstSpan[indexToShow],
				processStepsFirstSpan[indexToHide],
				processStepsFirstSpan.filter(
					(_, i) => i !== indexToShow && i !== indexToHide,
				),
			);
			titleAnimation(
				processTitle[indexToShow],
				processTitle[indexToHide],
				processTitle.filter((_, i) => i !== indexToShow && i !== indexToHide),
			);
		}, i);
	}

	timeline.set({}, {}, processLeftChildren.length);

	progressBarAnimation(
		timeline,
		processSectionProgressBar,
		processSectionWheel,
		processSectionProgressText,
	);

	priceSectionAnimationLogic();
</script>
