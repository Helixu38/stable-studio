---
interface Props {
	subServices?: string[];
}

import SectionHead from "@/layouts/SectionHead.astro";
import { toRoman } from "@/lib/utils";

const { subServices } = Astro.props;
---

<li class="serviceSection bg-background">
	<SectionHead class="!~py-4/12">
		<span
			slot="label"
			class="serviceLabel inline-block w-[30px] text-muted-foreground transition-all duration-500 ease-in md:w-auto lg:w-0">
			<slot name="label" class="text-base" />
		</span>
		<span
			slot="title"
			class="serviceSectionHeader block text-base uppercase md:text-lg lg:mt-2">
			<slot name="title" />
		</span>
		<div
			slot="description"
			class="flex flex-col gap-3 pt-3 md:pt-4 lg:gap-5 lg:pt-0">
			<h2
				class="colorSubheader flex max-w-[500px] flex-1 text-sm leading-[1.4] text-primary md:text-base md:leading-[1.8]">
				<slot name="subheader" />
			</h2>
			<div class="serviceContent">
				<slot name="description" />
				{
					subServices && (
						<ul class="serviceSectionSub grid grid-cols-[min-content_1fr] divide-y divide-muted-foreground/50 pt-3 text-primary md:pt-4">
							{subServices.map((subService, index) => (
								<li class="col-span-2 grid grid-cols-[0px_1fr] gap-6 py-2 md:gap-8 md:py-4">
									<span class="whitespace-nowrap text-sm md:text-base">
										{toRoman(index + 1)}
									</span>
									<span class="text-sm md:text-base">{subService}</span>
								</li>
							))}
						</ul>
					)
				}
			</div>
		</div>
	</SectionHead>
</li>
<style is:global>
	.serviceLabelActive {
		@apply text-primary before:content-['/'] after:content-['/'];
	}
</style>
<script>
	import { darkColors } from "@/lib/utils";
	import gsap from "gsap";
	import { ScrollTrigger } from "gsap/ScrollTrigger";
	gsap.registerPlugin(ScrollTrigger);
	ScrollTrigger.config({ ignoreMobileResize: true });

	const colorSubheader = gsap.utils.toArray(".colorSubheader") as HTMLElement[];
	const shuffledDarkColor = gsap.utils.shuffle(darkColors);
	const expandedArray = Array(
		Math.ceil(colorSubheader.length / shuffledDarkColor.length),
	)
		.fill(shuffledDarkColor)
		.flat();
	for (let i = 0; i < colorSubheader.length; i++) {
		gsap.to(colorSubheader[i], {
			color: expandedArray[i],
			duration: 0.5,
			ease: "power.out",
		});
	}

	const container = document.getElementById("serviceSectionContainer");
	const outerContainer = document.getElementById(
		"serviceSectionOuterContainer",
	);
	const serviceLabel = gsap.utils.toArray(".serviceLabel") as HTMLElement[];
	const serviceSection = gsap.utils.toArray(".serviceSection") as HTMLElement[];
	serviceSection[serviceSection.length - 1].style.borderBottomWidth = "1px";

	const offsetTop = parseFloat(getComputedStyle(container!).paddingTop);

	const remainingArray = [] as number[];
	for (let i = 0; i < serviceSection.length; i++) {
		const header = serviceSection[i].querySelector(
			".serviceSectionHeader",
		) as HTMLElement | null;
		const subServices = serviceSection[i].querySelector(
			".serviceSectionSub",
		) as HTMLElement | null;
		let remaining = 100;
		if (header && subServices) {
			const gap =
				subServices.getBoundingClientRect().bottom -
				header.getBoundingClientRect().bottom;
			remaining = serviceSection[i].offsetHeight - gap;
		}
		remainingArray.push(remaining);
	}
	const sum = remainingArray.slice(0, -1).reduce((prev, acc) => prev + acc, 0);
	const totalScrollOffset =
		sum + offsetTop + serviceSection[serviceSection.length - 1].offsetHeight;
	for (let i = 0; i < serviceSection.length; i++) {
		const serviceContent = serviceSection[i].querySelector(
			".serviceContent",
		) as HTMLElement | null;
		const distanceBefore = remainingArray
			.slice(0, i)
			.reduce((acc, cur) => acc + cur, 0);
		ScrollTrigger.create({
			trigger: serviceSection[i],
			start: `top-=${distanceBefore}`,
			endTrigger: container,
			end: `bottom top+=${totalScrollOffset}`,
			pin: true,
			pinSpacing: false,
			pinType: "transform",
			// anticipatePin: 1,
			onEnter: () => {
				serviceLabel[i - 1]?.classList.remove("serviceLabelActive");
				serviceLabel[i]?.classList.add("serviceLabelActive");
			},
			onLeaveBack: () => {
				serviceLabel[i + 1]?.classList.remove("serviceLabelActive");
				serviceLabel[i]?.classList.add("serviceLabelActive");
			},
			// id: `serviceSection${i}`,
			// markers: true,
		});

		if (serviceContent && i < serviceSection.length - 1)
			gsap.to(serviceContent, {
				autoAlpha: 0,
				scrollTrigger: {
					trigger: serviceSection[i].parentElement,
					start: `top-=${distanceBefore - serviceContent.offsetHeight * 0.5} top+=${offsetTop}`,
					end: `+=${serviceContent.offsetHeight * 0.5}`,
					scrub: 1,
					// id: `serviceContent${i}`,
					// markers: true,
				},
				ease: "power2.out",
			});
	}
	const sectionHead = document.querySelector(
		".sectionHead",
	) as HTMLElement | null;
	const sectionHeadPaddingTop = parseFloat(
		(sectionHead && getComputedStyle(sectionHead).paddingTop) || "0",
	);
	// this moves whole container up and indirectly sets the padding for the next section

	gsap.to(outerContainer, {
		y: -sectionHeadPaddingTop,
		scrollTrigger: {
			trigger: outerContainer,
			start: `top top`,
			end: `bottom top+=${totalScrollOffset - offsetTop}`,
			scrub: true,
			// markers: true,
		},
		ease: "none",
	});

	window.serviceSectionReady = true;
</script>
